'use client'

import React, { useState, useEffect } from 'react'
import { AutoGeneratedCard, AICardReviewProps } from '@/types'
import { supabase } from '@/lib/supabase'
import Card from '@/components/ui/Card'
import Button from '@/components/ui/Button'
import Input from '@/components/ui/Input'
import Modal from '@/components/ui/Modal'
import { 
  CheckCircle2, 
  XCircle, 
  Edit2, 
  Star, 
  Clock, 
  Filter, 
  ChevronDown,
  ChevronUp,
  Eye,
  Trash2,
  RotateCcw
} from 'lucide-react'

export function AICardReview({ 
  cards, 
  onApprove, 
  onReject, 
  onEdit, 
  showBulkActions = true 
}: AICardReviewProps) {
  const [selectedCards, setSelectedCards] = useState<string[]>([])
  const [editingCard, setEditingCard] = useState<AutoGeneratedCard | null>(null)
  const [editedContent, setEditedContent] = useState({ front: '', back: '', tags: '' })
  const [filterStatus, setFilterStatus] = useState<string>('all')
  const [sortBy, setSortBy] = useState<'quality' | 'confidence' | 'created'>('quality')
  const [expandedCards, setExpandedCards] = useState<string[]>([])
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    if (editingCard) {
      setEditedContent({
        front: editingCard.front_content,
        back: editingCard.back_content,
        tags: editingCard.tags.join(', ')
      })
    }
  }, [editingCard])

  const filteredAndSortedCards = cards
    .filter(card => {
      if (filterStatus === 'all') return true
      return card.review_status === filterStatus
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'quality':
          return b.quality_score - a.quality_score
        case 'confidence':
          return (b.confidence_score || 0) - (a.confidence_score || 0)
        case 'created':
          return new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
        default:
          return 0
      }
    })

  const handleSelectCard = (cardId: string) => {
    setSelectedCards(prev => 
      prev.includes(cardId) 
        ? prev.filter(id => id !== cardId)
        : [...prev, cardId]
    )
  }

  const handleSelectAll = () => {
    if (selectedCards.length === filteredAndSortedCards.length) {
      setSelectedCards([])
    } else {
      setSelectedCards(filteredAndSortedCards.map(card => card.id))
    }
  }

  const handleBulkApprove = async () => {
    if (selectedCards.length === 0) return
    
    setLoading(true)
    try {
      await onApprove(selectedCards)
      setSelectedCards([])
    } finally {
      setLoading(false)
    }
  }

  const handleBulkReject = async () => {
    if (selectedCards.length === 0) return
    
    setLoading(true)
    try {
      await onReject(selectedCards)
      setSelectedCards([])
    } finally {
      setLoading(false)
    }
  }

  const handleEditSave = async () => {
    if (!editingCard) return

    const updates = {
      front_content: editedContent.front,
      back_content: editedContent.back,
      tags: editedContent.tags.split(',').map(tag => tag.trim()).filter(Boolean)
    }

    try {
      await onEdit(editingCard.id, updates)
      setEditingCard(null)
    } catch (error) {
      console.error('Failed to update card:', error)
    }
  }

  const toggleCardExpansion = (cardId: string) => {
    setExpandedCards(prev => 
      prev.includes(cardId)
        ? prev.filter(id => id !== cardId)
        : [...prev, cardId]
    )
  }

  const getQualityColor = (score: number) => {
    if (score >= 0.8) return 'text-green-600 bg-green-100'
    if (score >= 0.6) return 'text-yellow-600 bg-yellow-100'
    return 'text-red-600 bg-red-100'
  }

  const getStatusBadge = (status: string) => {
    const badges = {
      pending: 'bg-yellow-100 text-yellow-800 border-yellow-200',
      approved: 'bg-green-100 text-green-800 border-green-200',
      rejected: 'bg-red-100 text-red-800 border-red-200',
      needs_review: 'bg-blue-100 text-blue-800 border-blue-200'
    }
    return badges[status as keyof typeof badges] || badges.pending
  }

  const renderCardContent = (card: AutoGeneratedCard, isExpanded: boolean) => (
    <div className="space-y-4">
      {/* Card Header */}
      <div className="flex items-start justify-between">
        <div className="flex items-center space-x-3">
          {showBulkActions && (
            <input
              type="checkbox"
              checked={selectedCards.includes(card.id)}
              onChange={() => handleSelectCard(card.id)}
              className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500"
            />
          )}
          <div className="flex items-center space-x-2">
            <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getStatusBadge(card.review_status)}`}>
              {card.review_status.replace('_', ' ')}
            </span>
            <span className={`px-2 py-1 rounded text-xs font-medium ${getQualityColor(card.quality_score)}`}>
              Quality: {(card.quality_score * 100).toFixed(0)}%
            </span>
            {card.confidence_score && (
              <span className="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs">
                Confidence: {(card.confidence_score * 100).toFixed(0)}%
              </span>
            )}
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => toggleCardExpansion(card.id)}
          >
            {isExpanded ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setEditingCard(card)}
          >
            <Edit2 className="w-4 h-4" />
          </Button>
        </div>
      </div>

      {/* Card Content */}
      <div className="space-y-3">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
            <h4 className="font-medium text-blue-900 mb-2">Front (Question)</h4>
            <p className="text-blue-800">{card.front_content}</p>
          </div>
          <div className="bg-green-50 border border-green-200 rounded-lg p-3">
            <h4 className="font-medium text-green-900 mb-2">Back (Answer)</h4>
            <p className="text-green-800">{card.back_content}</p>
          </div>
        </div>

        {/* Tags */}
        {card.tags.length > 0 && (
          <div className="flex flex-wrap gap-2">
            {card.tags.map((tag, index) => (
              <span 
                key={index}
                className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs"
              >
                {tag}
              </span>
            ))}
          </div>
        )}

        {/* Expanded Details */}
        {isExpanded && (
          <div className="border-t pt-4 space-y-3">
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="font-medium text-gray-700">Card Type:</span>
                <p className="text-gray-600 capitalize">{card.card_type}</p>
              </div>
              <div>
                <span className="font-medium text-gray-700">Difficulty:</span>
                <p className="text-gray-600">{card.difficulty_level}/5</p>
              </div>
              <div>
                <span className="font-medium text-gray-700">Created:</span>
                <p className="text-gray-600">{new Date(card.created_at).toLocaleString()}</p>
              </div>
              <div>
                <span className="font-medium text-gray-700">Auto Approved:</span>
                <p className="text-gray-600">{card.auto_approved ? 'Yes' : 'No'}</p>
              </div>
            </div>

            {card.source_text && (
              <div>
                <span className="font-medium text-gray-700">Source Text:</span>
                <p className="text-gray-600 text-sm mt-1 bg-gray-100 p-2 rounded">
                  {card.source_text}
                </p>
              </div>
            )}
          </div>
        )}

        {/* Action Buttons */}
        {card.review_status === 'pending' && (
          <div className="flex justify-end space-x-2 pt-3 border-t">
            <Button
              variant="danger"
              size="sm"
              onClick={() => onReject([card.id])}
              disabled={loading}
            >
              <XCircle className="w-4 h-4 mr-1" />
              Reject
            </Button>
            <Button
              variant="primary"
              size="sm"
              onClick={() => onApprove([card.id])}
              disabled={loading}
            >
              <CheckCircle2 className="w-4 h-4 mr-1" />
              Approve
            </Button>
          </div>
        )}
      </div>
    </div>
  )

  return (
    <div className="space-y-6">
      {/* Header and Controls */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">AI Generated Cards Review</h2>
          <p className="text-gray-600">
            {cards.length} cards â€¢ {selectedCards.length} selected
          </p>
        </div>

        {/* Filters and Sort */}
        <div className="flex items-center space-x-3">
          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Status</option>
            <option value="pending">Pending</option>
            <option value="approved">Approved</option>
            <option value="rejected">Rejected</option>
            <option value="needs_review">Needs Review</option>
          </select>

          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value as any)}
            className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="quality">Sort by Quality</option>
            <option value="confidence">Sort by Confidence</option>
            <option value="created">Sort by Created</option>
          </select>
        </div>
      </div>

      {/* Bulk Actions */}
      {showBulkActions && filteredAndSortedCards.length > 0 && (
        <Card className="p-4 bg-gray-50">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={selectedCards.length === filteredAndSortedCards.length}
                  onChange={handleSelectAll}
                  className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500"
                />
                <span className="text-sm font-medium">Select All</span>
              </label>
              <span className="text-sm text-gray-600">
                {selectedCards.length} of {filteredAndSortedCards.length} selected
              </span>
            </div>

            {selectedCards.length > 0 && (
              <div className="flex items-center space-x-2">
                <Button
                  variant="danger"
                  size="sm"
                  onClick={handleBulkReject}
                  disabled={loading}
                >
                  <XCircle className="w-4 h-4 mr-1" />
                  Reject Selected
                </Button>
                <Button
                  variant="primary"
                  size="sm"
                  onClick={handleBulkApprove}
                  disabled={loading}
                >
                  <CheckCircle2 className="w-4 h-4 mr-1" />
                  Approve Selected
                </Button>
              </div>
            )}
          </div>
        </Card>
      )}

      {/* Cards List */}
      <div className="space-y-4">
        {filteredAndSortedCards.length === 0 ? (
          <Card className="p-8 text-center">
            <div className="text-gray-500">
              <Filter className="w-12 h-12 mx-auto mb-4 opacity-50" />
              <h3 className="text-lg font-medium mb-2">No cards found</h3>
              <p>No cards match your current filter criteria.</p>
            </div>
          </Card>
        ) : (
          filteredAndSortedCards.map(card => {
            const isExpanded = expandedCards.includes(card.id)
            return (
              <Card key={card.id} className="p-6">
                {renderCardContent(card, isExpanded)}
              </Card>
            )
          })
        )}
      </div>

      {/* Edit Modal */}
      <Modal
        isOpen={!!editingCard}
        onClose={() => setEditingCard(null)}
        title="Edit Flashcard"
        size="lg"
      >
        {editingCard && (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Front Content (Question)
              </label>
              <Input
                type="textarea"
                value={editedContent.front}
                onChange={(e) => setEditedContent(prev => ({ ...prev, front: e.target.value }))}
                placeholder="Enter the question or prompt..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Back Content (Answer)
              </label>
              <Input
                type="textarea"
                value={editedContent.back}
                onChange={(e) => setEditedContent(prev => ({ ...prev, back: e.target.value }))}
                placeholder="Enter the answer or explanation..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tags (comma-separated)
              </label>
              <Input
                value={editedContent.tags}
                onChange={(e) => setEditedContent(prev => ({ ...prev, tags: e.target.value }))}
                placeholder="tag1, tag2, tag3..."
              />
            </div>

            <div className="flex justify-end space-x-3 pt-4">
              <Button
                variant="secondary"
                onClick={() => setEditingCard(null)}
              >
                Cancel
              </Button>
              <Button
                variant="primary"
                onClick={handleEditSave}
              >
                Save Changes
              </Button>
            </div>
          </div>
        )}
      </Modal>
    </div>
  )
}